{"ast":null,"code":"'use strict';\n\nconst is = require('./is');\n/**\n * Weighting to apply when using contain/cover fit.\n * @member\n * @private\n */\n\n\nconst gravity = {\n  center: 0,\n  centre: 0,\n  north: 1,\n  east: 2,\n  south: 3,\n  west: 4,\n  northeast: 5,\n  southeast: 6,\n  southwest: 7,\n  northwest: 8\n};\n/**\n * Position to apply when using contain/cover fit.\n * @member\n * @private\n */\n\nconst position = {\n  top: 1,\n  right: 2,\n  bottom: 3,\n  left: 4,\n  'right top': 5,\n  'right bottom': 6,\n  'left bottom': 7,\n  'left top': 8\n};\n/**\n * Strategies for automagic cover behaviour.\n * @member\n * @private\n */\n\nconst strategy = {\n  entropy: 16,\n  attention: 17\n};\n/**\n * Reduction kernels.\n * @member\n * @private\n */\n\nconst kernel = {\n  nearest: 'nearest',\n  cubic: 'cubic',\n  mitchell: 'mitchell',\n  lanczos2: 'lanczos2',\n  lanczos3: 'lanczos3'\n};\n/**\n * Methods by which an image can be resized to fit the provided dimensions.\n * @member\n * @private\n */\n\nconst fit = {\n  contain: 'contain',\n  cover: 'cover',\n  fill: 'fill',\n  inside: 'inside',\n  outside: 'outside'\n};\n/**\n * Map external fit property to internal canvas property.\n * @member\n * @private\n */\n\nconst mapFitToCanvas = {\n  contain: 'embed',\n  cover: 'crop',\n  fill: 'ignore_aspect',\n  inside: 'max',\n  outside: 'min'\n};\n/**\n * Resize image to `width`, `height` or `width x height`.\n *\n * When both a `width` and `height` are provided, the possible methods by which the image should **fit** these are:\n * - `cover`: Crop to cover both provided dimensions (the default).\n * - `contain`: Embed within both provided dimensions.\n * - `fill`: Ignore the aspect ratio of the input and stretch to both provided dimensions.\n * - `inside`: Preserving aspect ratio, resize the image to be as large as possible while ensuring its dimensions are less than or equal to both those specified.\n * - `outside`: Preserving aspect ratio, resize the image to be as small as possible while ensuring its dimensions are greater than or equal to both those specified.\n * Some of these values are based on the [object-fit](https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit) CSS property.\n *\n * When using a `fit` of `cover` or `contain`, the default **position** is `centre`. Other options are:\n * - `sharp.position`: `top`, `right top`, `right`, `right bottom`, `bottom`, `left bottom`, `left`, `left top`.\n * - `sharp.gravity`: `north`, `northeast`, `east`, `southeast`, `south`, `southwest`, `west`, `northwest`, `center` or `centre`.\n * - `sharp.strategy`: `cover` only, dynamically crop using either the `entropy` or `attention` strategy.\n * Some of these values are based on the [object-position](https://developer.mozilla.org/en-US/docs/Web/CSS/object-position) CSS property.\n *\n * The experimental strategy-based approach resizes so one dimension is at its target length\n * then repeatedly ranks edge regions, discarding the edge with the lowest score based on the selected strategy.\n * - `entropy`: focus on the region with the highest [Shannon entropy](https://en.wikipedia.org/wiki/Entropy_%28information_theory%29).\n * - `attention`: focus on the region with the highest luminance frequency, colour saturation and presence of skin tones.\n *\n * Possible interpolation kernels are:\n * - `nearest`: Use [nearest neighbour interpolation](http://en.wikipedia.org/wiki/Nearest-neighbor_interpolation).\n * - `cubic`: Use a [Catmull-Rom spline](https://en.wikipedia.org/wiki/Centripetal_Catmull%E2%80%93Rom_spline).\n * - `mitchell`: Use a [Mitchell-Netravali spline](https://www.cs.utexas.edu/~fussell/courses/cs384g-fall2013/lectures/mitchell/Mitchell.pdf).\n * - `lanczos2`: Use a [Lanczos kernel](https://en.wikipedia.org/wiki/Lanczos_resampling#Lanczos_kernel) with `a=2`.\n * - `lanczos3`: Use a Lanczos kernel with `a=3` (the default).\n *\n * @example\n * sharp(input)\n *   .resize({ width: 100 })\n *   .toBuffer()\n *   .then(data => {\n *     // 100 pixels wide, auto-scaled height\n *   });\n *\n * @example\n * sharp(input)\n *   .resize({ height: 100 })\n *   .toBuffer()\n *   .then(data => {\n *     // 100 pixels high, auto-scaled width\n *   });\n *\n * @example\n * sharp(input)\n *   .resize(200, 300, {\n *     kernel: sharp.kernel.nearest,\n *     fit: 'contain',\n *     position: 'right top',\n *     background: { r: 255, g: 255, b: 255, alpha: 0.5 }\n *   })\n *   .toFile('output.png')\n *   .then(() => {\n *     // output.png is a 200 pixels wide and 300 pixels high image\n *     // containing a nearest-neighbour scaled version\n *     // contained within the north-east corner of a semi-transparent white canvas\n *   });\n *\n * @example\n * const transformer = sharp()\n *   .resize({\n *     width: 200,\n *     height: 200,\n *     fit: sharp.fit.cover,\n *     position: sharp.strategy.entropy\n *   });\n * // Read image data from readableStream\n * // Write 200px square auto-cropped image data to writableStream\n * readableStream\n *   .pipe(transformer)\n *   .pipe(writableStream);\n *\n * @example\n * sharp(input)\n *   .resize(200, 200, {\n *     fit: sharp.fit.inside,\n *     withoutEnlargement: true\n *   })\n *   .toFormat('jpeg')\n *   .toBuffer()\n *   .then(function(outputBuffer) {\n *     // outputBuffer contains JPEG image data\n *     // no wider and no higher than 200 pixels\n *     // and no larger than the input image\n *   });\n *\n * @example\n * const scaleByHalf = await sharp(input)\n *   .metadata()\n *   .then(({ width }) => sharp(input)\n *     .resize(Math.round(width * 0.5))\n *     .toBuffer()\n *   );\n *\n * @param {Number} [width] - pixels wide the resultant image should be. Use `null` or `undefined` to auto-scale the width to match the height.\n * @param {Number} [height] - pixels high the resultant image should be. Use `null` or `undefined` to auto-scale the height to match the width.\n * @param {Object} [options]\n * @param {String} [options.width] - alternative means of specifying `width`. If both are present this take priority.\n * @param {String} [options.height] - alternative means of specifying `height`. If both are present this take priority.\n * @param {String} [options.fit='cover'] - how the image should be resized to fit both provided dimensions, one of `cover`, `contain`, `fill`, `inside` or `outside`.\n * @param {String} [options.position='centre'] - position, gravity or strategy to use when `fit` is `cover` or `contain`.\n * @param {String|Object} [options.background={r: 0, g: 0, b: 0, alpha: 1}] - background colour when using a `fit` of `contain`, parsed by the [color](https://www.npmjs.org/package/color) module, defaults to black without transparency.\n * @param {String} [options.kernel='lanczos3'] - the kernel to use for image reduction.\n * @param {Boolean} [options.withoutEnlargement=false] - do not enlarge if the width *or* height are already less than the specified dimensions, equivalent to GraphicsMagick's `>` geometry option.\n * @param {Boolean} [options.fastShrinkOnLoad=true] - take greater advantage of the JPEG and WebP shrink-on-load feature, which can lead to a slight moirÃ© pattern on some images.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\nfunction resize(width, height, options) {\n  if (is.defined(width)) {\n    if (is.object(width) && !is.defined(options)) {\n      options = width;\n    } else if (is.integer(width) && width > 0) {\n      this.options.width = width;\n    } else {\n      throw is.invalidParameterError('width', 'positive integer', width);\n    }\n  } else {\n    this.options.width = -1;\n  }\n\n  if (is.defined(height)) {\n    if (is.integer(height) && height > 0) {\n      this.options.height = height;\n    } else {\n      throw is.invalidParameterError('height', 'positive integer', height);\n    }\n  } else {\n    this.options.height = -1;\n  }\n\n  if (is.object(options)) {\n    // Width\n    if (is.defined(options.width)) {\n      if (is.integer(options.width) && options.width > 0) {\n        this.options.width = options.width;\n      } else {\n        throw is.invalidParameterError('width', 'positive integer', options.width);\n      }\n    } // Height\n\n\n    if (is.defined(options.height)) {\n      if (is.integer(options.height) && options.height > 0) {\n        this.options.height = options.height;\n      } else {\n        throw is.invalidParameterError('height', 'positive integer', options.height);\n      }\n    } // Fit\n\n\n    if (is.defined(options.fit)) {\n      const canvas = mapFitToCanvas[options.fit];\n\n      if (is.string(canvas)) {\n        this.options.canvas = canvas;\n      } else {\n        throw is.invalidParameterError('fit', 'valid fit', options.fit);\n      }\n    } // Position\n\n\n    if (is.defined(options.position)) {\n      const pos = is.integer(options.position) ? options.position : strategy[options.position] || position[options.position] || gravity[options.position];\n\n      if (is.integer(pos) && (is.inRange(pos, 0, 8) || is.inRange(pos, 16, 17))) {\n        this.options.position = pos;\n      } else {\n        throw is.invalidParameterError('position', 'valid position/gravity/strategy', options.position);\n      }\n    } // Background\n\n\n    this._setBackgroundColourOption('resizeBackground', options.background); // Kernel\n\n\n    if (is.defined(options.kernel)) {\n      if (is.string(kernel[options.kernel])) {\n        this.options.kernel = kernel[options.kernel];\n      } else {\n        throw is.invalidParameterError('kernel', 'valid kernel name', options.kernel);\n      }\n    } // Without enlargement\n\n\n    if (is.defined(options.withoutEnlargement)) {\n      this._setBooleanOption('withoutEnlargement', options.withoutEnlargement);\n    } // Shrink on load\n\n\n    if (is.defined(options.fastShrinkOnLoad)) {\n      this._setBooleanOption('fastShrinkOnLoad', options.fastShrinkOnLoad);\n    }\n  }\n\n  return this;\n}\n/**\n * Extends/pads the edges of the image with the provided background colour.\n * This operation will always occur after resizing and extraction, if any.\n *\n * @example\n * // Resize to 140 pixels wide, then add 10 transparent pixels\n * // to the top, left and right edges and 20 to the bottom edge\n * sharp(input)\n *   .resize(140)\n *   .extend({\n *     top: 10,\n *     bottom: 20,\n *     left: 10,\n *     right: 10,\n *     background: { r: 0, g: 0, b: 0, alpha: 0 }\n *   })\n *   ...\n *\n * @param {(Number|Object)} extend - single pixel count to add to all edges or an Object with per-edge counts\n * @param {Number} [extend.top]\n * @param {Number} [extend.left]\n * @param {Number} [extend.bottom]\n * @param {Number} [extend.right]\n * @param {String|Object} [extend.background={r: 0, g: 0, b: 0, alpha: 1}] - background colour, parsed by the [color](https://www.npmjs.org/package/color) module, defaults to black without transparency.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n*/\n\n\nfunction extend(extend) {\n  if (is.integer(extend) && extend > 0) {\n    this.options.extendTop = extend;\n    this.options.extendBottom = extend;\n    this.options.extendLeft = extend;\n    this.options.extendRight = extend;\n  } else if (is.object(extend) && is.integer(extend.top) && extend.top >= 0 && is.integer(extend.bottom) && extend.bottom >= 0 && is.integer(extend.left) && extend.left >= 0 && is.integer(extend.right) && extend.right >= 0) {\n    this.options.extendTop = extend.top;\n    this.options.extendBottom = extend.bottom;\n    this.options.extendLeft = extend.left;\n    this.options.extendRight = extend.right;\n\n    this._setBackgroundColourOption('extendBackground', extend.background);\n  } else {\n    throw is.invalidParameterError('extend', 'integer or object', extend);\n  }\n\n  return this;\n}\n/**\n * Extract a region of the image.\n *\n * - Use `extract` before `resize` for pre-resize extraction.\n * - Use `extract` after `resize` for post-resize extraction.\n * - Use `extract` before and after for both.\n *\n * @example\n * sharp(input)\n *   .extract({ left: left, top: top, width: width, height: height })\n *   .toFile(output, function(err) {\n *     // Extract a region of the input image, saving in the same format.\n *   });\n * @example\n * sharp(input)\n *   .extract({ left: leftOffsetPre, top: topOffsetPre, width: widthPre, height: heightPre })\n *   .resize(width, height)\n *   .extract({ left: leftOffsetPost, top: topOffsetPost, width: widthPost, height: heightPost })\n *   .toFile(output, function(err) {\n *     // Extract a region, resize, then extract from the resized image\n *   });\n *\n * @param {Object} options - describes the region to extract using integral pixel values\n * @param {Number} options.left - zero-indexed offset from left edge\n * @param {Number} options.top - zero-indexed offset from top edge\n * @param {Number} options.width - width of region to extract\n * @param {Number} options.height - height of region to extract\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\n\nfunction extract(options) {\n  const suffix = this.options.width === -1 && this.options.height === -1 ? 'Pre' : 'Post';\n  ['left', 'top', 'width', 'height'].forEach(function (name) {\n    const value = options[name];\n\n    if (is.integer(value) && value >= 0) {\n      this.options[name + (name === 'left' || name === 'top' ? 'Offset' : '') + suffix] = value;\n    } else {\n      throw is.invalidParameterError(name, 'integer', value);\n    }\n  }, this); // Ensure existing rotation occurs before pre-resize extraction\n\n  if (suffix === 'Pre' && (this.options.angle % 360 !== 0 || this.options.useExifOrientation === true || this.options.rotationAngle !== 0)) {\n    this.options.rotateBeforePreExtract = true;\n  }\n\n  return this;\n}\n/**\n * Trim \"boring\" pixels from all edges that contain values similar to the top-left pixel.\n * Images consisting entirely of a single colour will calculate \"boring\" using the alpha channel, if any.\n *\n * The `info` response Object will contain `trimOffsetLeft` and `trimOffsetTop` properties.\n *\n * @param {Number} [threshold=10] the allowed difference from the top-left pixel, a number greater than zero.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\n\nfunction trim(threshold) {\n  if (!is.defined(threshold)) {\n    this.options.trimThreshold = 10;\n  } else if (is.number(threshold) && threshold > 0) {\n    this.options.trimThreshold = threshold;\n  } else {\n    throw is.invalidParameterError('threshold', 'number greater than zero', threshold);\n  }\n\n  return this;\n}\n/**\n * Decorate the Sharp prototype with resize-related functions.\n * @private\n */\n\n\nmodule.exports = function (Sharp) {\n  Object.assign(Sharp.prototype, {\n    resize,\n    extend,\n    extract,\n    trim\n  }); // Class attributes\n\n  Sharp.gravity = gravity;\n  Sharp.strategy = strategy;\n  Sharp.kernel = kernel;\n  Sharp.fit = fit;\n  Sharp.position = position;\n};","map":{"version":3,"sources":["/media/gabriel/HD/Cursos/OmniStack 7.0/aulas/node_modules/sharp/lib/resize.js"],"names":["is","require","gravity","center","centre","north","east","south","west","northeast","southeast","southwest","northwest","position","top","right","bottom","left","strategy","entropy","attention","kernel","nearest","cubic","mitchell","lanczos2","lanczos3","fit","contain","cover","fill","inside","outside","mapFitToCanvas","resize","width","height","options","defined","object","integer","invalidParameterError","canvas","string","pos","inRange","_setBackgroundColourOption","background","withoutEnlargement","_setBooleanOption","fastShrinkOnLoad","extend","extendTop","extendBottom","extendLeft","extendRight","extract","suffix","forEach","name","value","angle","useExifOrientation","rotationAngle","rotateBeforePreExtract","trim","threshold","trimThreshold","number","module","exports","Sharp","Object","assign","prototype"],"mappings":"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","sourcesContent":["'use strict';\n\nconst is = require('./is');\n\n/**\n * Weighting to apply when using contain/cover fit.\n * @member\n * @private\n */\nconst gravity = {\n  center: 0,\n  centre: 0,\n  north: 1,\n  east: 2,\n  south: 3,\n  west: 4,\n  northeast: 5,\n  southeast: 6,\n  southwest: 7,\n  northwest: 8\n};\n\n/**\n * Position to apply when using contain/cover fit.\n * @member\n * @private\n */\nconst position = {\n  top: 1,\n  right: 2,\n  bottom: 3,\n  left: 4,\n  'right top': 5,\n  'right bottom': 6,\n  'left bottom': 7,\n  'left top': 8\n};\n\n/**\n * Strategies for automagic cover behaviour.\n * @member\n * @private\n */\nconst strategy = {\n  entropy: 16,\n  attention: 17\n};\n\n/**\n * Reduction kernels.\n * @member\n * @private\n */\nconst kernel = {\n  nearest: 'nearest',\n  cubic: 'cubic',\n  mitchell: 'mitchell',\n  lanczos2: 'lanczos2',\n  lanczos3: 'lanczos3'\n};\n\n/**\n * Methods by which an image can be resized to fit the provided dimensions.\n * @member\n * @private\n */\nconst fit = {\n  contain: 'contain',\n  cover: 'cover',\n  fill: 'fill',\n  inside: 'inside',\n  outside: 'outside'\n};\n\n/**\n * Map external fit property to internal canvas property.\n * @member\n * @private\n */\nconst mapFitToCanvas = {\n  contain: 'embed',\n  cover: 'crop',\n  fill: 'ignore_aspect',\n  inside: 'max',\n  outside: 'min'\n};\n\n/**\n * Resize image to `width`, `height` or `width x height`.\n *\n * When both a `width` and `height` are provided, the possible methods by which the image should **fit** these are:\n * - `cover`: Crop to cover both provided dimensions (the default).\n * - `contain`: Embed within both provided dimensions.\n * - `fill`: Ignore the aspect ratio of the input and stretch to both provided dimensions.\n * - `inside`: Preserving aspect ratio, resize the image to be as large as possible while ensuring its dimensions are less than or equal to both those specified.\n * - `outside`: Preserving aspect ratio, resize the image to be as small as possible while ensuring its dimensions are greater than or equal to both those specified.\n * Some of these values are based on the [object-fit](https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit) CSS property.\n *\n * When using a `fit` of `cover` or `contain`, the default **position** is `centre`. Other options are:\n * - `sharp.position`: `top`, `right top`, `right`, `right bottom`, `bottom`, `left bottom`, `left`, `left top`.\n * - `sharp.gravity`: `north`, `northeast`, `east`, `southeast`, `south`, `southwest`, `west`, `northwest`, `center` or `centre`.\n * - `sharp.strategy`: `cover` only, dynamically crop using either the `entropy` or `attention` strategy.\n * Some of these values are based on the [object-position](https://developer.mozilla.org/en-US/docs/Web/CSS/object-position) CSS property.\n *\n * The experimental strategy-based approach resizes so one dimension is at its target length\n * then repeatedly ranks edge regions, discarding the edge with the lowest score based on the selected strategy.\n * - `entropy`: focus on the region with the highest [Shannon entropy](https://en.wikipedia.org/wiki/Entropy_%28information_theory%29).\n * - `attention`: focus on the region with the highest luminance frequency, colour saturation and presence of skin tones.\n *\n * Possible interpolation kernels are:\n * - `nearest`: Use [nearest neighbour interpolation](http://en.wikipedia.org/wiki/Nearest-neighbor_interpolation).\n * - `cubic`: Use a [Catmull-Rom spline](https://en.wikipedia.org/wiki/Centripetal_Catmull%E2%80%93Rom_spline).\n * - `mitchell`: Use a [Mitchell-Netravali spline](https://www.cs.utexas.edu/~fussell/courses/cs384g-fall2013/lectures/mitchell/Mitchell.pdf).\n * - `lanczos2`: Use a [Lanczos kernel](https://en.wikipedia.org/wiki/Lanczos_resampling#Lanczos_kernel) with `a=2`.\n * - `lanczos3`: Use a Lanczos kernel with `a=3` (the default).\n *\n * @example\n * sharp(input)\n *   .resize({ width: 100 })\n *   .toBuffer()\n *   .then(data => {\n *     // 100 pixels wide, auto-scaled height\n *   });\n *\n * @example\n * sharp(input)\n *   .resize({ height: 100 })\n *   .toBuffer()\n *   .then(data => {\n *     // 100 pixels high, auto-scaled width\n *   });\n *\n * @example\n * sharp(input)\n *   .resize(200, 300, {\n *     kernel: sharp.kernel.nearest,\n *     fit: 'contain',\n *     position: 'right top',\n *     background: { r: 255, g: 255, b: 255, alpha: 0.5 }\n *   })\n *   .toFile('output.png')\n *   .then(() => {\n *     // output.png is a 200 pixels wide and 300 pixels high image\n *     // containing a nearest-neighbour scaled version\n *     // contained within the north-east corner of a semi-transparent white canvas\n *   });\n *\n * @example\n * const transformer = sharp()\n *   .resize({\n *     width: 200,\n *     height: 200,\n *     fit: sharp.fit.cover,\n *     position: sharp.strategy.entropy\n *   });\n * // Read image data from readableStream\n * // Write 200px square auto-cropped image data to writableStream\n * readableStream\n *   .pipe(transformer)\n *   .pipe(writableStream);\n *\n * @example\n * sharp(input)\n *   .resize(200, 200, {\n *     fit: sharp.fit.inside,\n *     withoutEnlargement: true\n *   })\n *   .toFormat('jpeg')\n *   .toBuffer()\n *   .then(function(outputBuffer) {\n *     // outputBuffer contains JPEG image data\n *     // no wider and no higher than 200 pixels\n *     // and no larger than the input image\n *   });\n *\n * @example\n * const scaleByHalf = await sharp(input)\n *   .metadata()\n *   .then(({ width }) => sharp(input)\n *     .resize(Math.round(width * 0.5))\n *     .toBuffer()\n *   );\n *\n * @param {Number} [width] - pixels wide the resultant image should be. Use `null` or `undefined` to auto-scale the width to match the height.\n * @param {Number} [height] - pixels high the resultant image should be. Use `null` or `undefined` to auto-scale the height to match the width.\n * @param {Object} [options]\n * @param {String} [options.width] - alternative means of specifying `width`. If both are present this take priority.\n * @param {String} [options.height] - alternative means of specifying `height`. If both are present this take priority.\n * @param {String} [options.fit='cover'] - how the image should be resized to fit both provided dimensions, one of `cover`, `contain`, `fill`, `inside` or `outside`.\n * @param {String} [options.position='centre'] - position, gravity or strategy to use when `fit` is `cover` or `contain`.\n * @param {String|Object} [options.background={r: 0, g: 0, b: 0, alpha: 1}] - background colour when using a `fit` of `contain`, parsed by the [color](https://www.npmjs.org/package/color) module, defaults to black without transparency.\n * @param {String} [options.kernel='lanczos3'] - the kernel to use for image reduction.\n * @param {Boolean} [options.withoutEnlargement=false] - do not enlarge if the width *or* height are already less than the specified dimensions, equivalent to GraphicsMagick's `>` geometry option.\n * @param {Boolean} [options.fastShrinkOnLoad=true] - take greater advantage of the JPEG and WebP shrink-on-load feature, which can lead to a slight moirÃ© pattern on some images.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction resize (width, height, options) {\n  if (is.defined(width)) {\n    if (is.object(width) && !is.defined(options)) {\n      options = width;\n    } else if (is.integer(width) && width > 0) {\n      this.options.width = width;\n    } else {\n      throw is.invalidParameterError('width', 'positive integer', width);\n    }\n  } else {\n    this.options.width = -1;\n  }\n  if (is.defined(height)) {\n    if (is.integer(height) && height > 0) {\n      this.options.height = height;\n    } else {\n      throw is.invalidParameterError('height', 'positive integer', height);\n    }\n  } else {\n    this.options.height = -1;\n  }\n  if (is.object(options)) {\n    // Width\n    if (is.defined(options.width)) {\n      if (is.integer(options.width) && options.width > 0) {\n        this.options.width = options.width;\n      } else {\n        throw is.invalidParameterError('width', 'positive integer', options.width);\n      }\n    }\n    // Height\n    if (is.defined(options.height)) {\n      if (is.integer(options.height) && options.height > 0) {\n        this.options.height = options.height;\n      } else {\n        throw is.invalidParameterError('height', 'positive integer', options.height);\n      }\n    }\n    // Fit\n    if (is.defined(options.fit)) {\n      const canvas = mapFitToCanvas[options.fit];\n      if (is.string(canvas)) {\n        this.options.canvas = canvas;\n      } else {\n        throw is.invalidParameterError('fit', 'valid fit', options.fit);\n      }\n    }\n    // Position\n    if (is.defined(options.position)) {\n      const pos = is.integer(options.position)\n        ? options.position\n        : strategy[options.position] || position[options.position] || gravity[options.position];\n      if (is.integer(pos) && (is.inRange(pos, 0, 8) || is.inRange(pos, 16, 17))) {\n        this.options.position = pos;\n      } else {\n        throw is.invalidParameterError('position', 'valid position/gravity/strategy', options.position);\n      }\n    }\n    // Background\n    this._setBackgroundColourOption('resizeBackground', options.background);\n    // Kernel\n    if (is.defined(options.kernel)) {\n      if (is.string(kernel[options.kernel])) {\n        this.options.kernel = kernel[options.kernel];\n      } else {\n        throw is.invalidParameterError('kernel', 'valid kernel name', options.kernel);\n      }\n    }\n    // Without enlargement\n    if (is.defined(options.withoutEnlargement)) {\n      this._setBooleanOption('withoutEnlargement', options.withoutEnlargement);\n    }\n    // Shrink on load\n    if (is.defined(options.fastShrinkOnLoad)) {\n      this._setBooleanOption('fastShrinkOnLoad', options.fastShrinkOnLoad);\n    }\n  }\n  return this;\n}\n\n/**\n * Extends/pads the edges of the image with the provided background colour.\n * This operation will always occur after resizing and extraction, if any.\n *\n * @example\n * // Resize to 140 pixels wide, then add 10 transparent pixels\n * // to the top, left and right edges and 20 to the bottom edge\n * sharp(input)\n *   .resize(140)\n *   .extend({\n *     top: 10,\n *     bottom: 20,\n *     left: 10,\n *     right: 10,\n *     background: { r: 0, g: 0, b: 0, alpha: 0 }\n *   })\n *   ...\n *\n * @param {(Number|Object)} extend - single pixel count to add to all edges or an Object with per-edge counts\n * @param {Number} [extend.top]\n * @param {Number} [extend.left]\n * @param {Number} [extend.bottom]\n * @param {Number} [extend.right]\n * @param {String|Object} [extend.background={r: 0, g: 0, b: 0, alpha: 1}] - background colour, parsed by the [color](https://www.npmjs.org/package/color) module, defaults to black without transparency.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n*/\nfunction extend (extend) {\n  if (is.integer(extend) && extend > 0) {\n    this.options.extendTop = extend;\n    this.options.extendBottom = extend;\n    this.options.extendLeft = extend;\n    this.options.extendRight = extend;\n  } else if (\n    is.object(extend) &&\n    is.integer(extend.top) && extend.top >= 0 &&\n    is.integer(extend.bottom) && extend.bottom >= 0 &&\n    is.integer(extend.left) && extend.left >= 0 &&\n    is.integer(extend.right) && extend.right >= 0\n  ) {\n    this.options.extendTop = extend.top;\n    this.options.extendBottom = extend.bottom;\n    this.options.extendLeft = extend.left;\n    this.options.extendRight = extend.right;\n    this._setBackgroundColourOption('extendBackground', extend.background);\n  } else {\n    throw is.invalidParameterError('extend', 'integer or object', extend);\n  }\n  return this;\n}\n\n/**\n * Extract a region of the image.\n *\n * - Use `extract` before `resize` for pre-resize extraction.\n * - Use `extract` after `resize` for post-resize extraction.\n * - Use `extract` before and after for both.\n *\n * @example\n * sharp(input)\n *   .extract({ left: left, top: top, width: width, height: height })\n *   .toFile(output, function(err) {\n *     // Extract a region of the input image, saving in the same format.\n *   });\n * @example\n * sharp(input)\n *   .extract({ left: leftOffsetPre, top: topOffsetPre, width: widthPre, height: heightPre })\n *   .resize(width, height)\n *   .extract({ left: leftOffsetPost, top: topOffsetPost, width: widthPost, height: heightPost })\n *   .toFile(output, function(err) {\n *     // Extract a region, resize, then extract from the resized image\n *   });\n *\n * @param {Object} options - describes the region to extract using integral pixel values\n * @param {Number} options.left - zero-indexed offset from left edge\n * @param {Number} options.top - zero-indexed offset from top edge\n * @param {Number} options.width - width of region to extract\n * @param {Number} options.height - height of region to extract\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction extract (options) {\n  const suffix = this.options.width === -1 && this.options.height === -1 ? 'Pre' : 'Post';\n  ['left', 'top', 'width', 'height'].forEach(function (name) {\n    const value = options[name];\n    if (is.integer(value) && value >= 0) {\n      this.options[name + (name === 'left' || name === 'top' ? 'Offset' : '') + suffix] = value;\n    } else {\n      throw is.invalidParameterError(name, 'integer', value);\n    }\n  }, this);\n  // Ensure existing rotation occurs before pre-resize extraction\n  if (suffix === 'Pre' && ((this.options.angle % 360) !== 0 || this.options.useExifOrientation === true || this.options.rotationAngle !== 0)) {\n    this.options.rotateBeforePreExtract = true;\n  }\n  return this;\n}\n\n/**\n * Trim \"boring\" pixels from all edges that contain values similar to the top-left pixel.\n * Images consisting entirely of a single colour will calculate \"boring\" using the alpha channel, if any.\n *\n * The `info` response Object will contain `trimOffsetLeft` and `trimOffsetTop` properties.\n *\n * @param {Number} [threshold=10] the allowed difference from the top-left pixel, a number greater than zero.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction trim (threshold) {\n  if (!is.defined(threshold)) {\n    this.options.trimThreshold = 10;\n  } else if (is.number(threshold) && threshold > 0) {\n    this.options.trimThreshold = threshold;\n  } else {\n    throw is.invalidParameterError('threshold', 'number greater than zero', threshold);\n  }\n  return this;\n}\n\n/**\n * Decorate the Sharp prototype with resize-related functions.\n * @private\n */\nmodule.exports = function (Sharp) {\n  Object.assign(Sharp.prototype, {\n    resize,\n    extend,\n    extract,\n    trim\n  });\n  // Class attributes\n  Sharp.gravity = gravity;\n  Sharp.strategy = strategy;\n  Sharp.kernel = kernel;\n  Sharp.fit = fit;\n  Sharp.position = position;\n};\n"]},"metadata":{},"sourceType":"script"}