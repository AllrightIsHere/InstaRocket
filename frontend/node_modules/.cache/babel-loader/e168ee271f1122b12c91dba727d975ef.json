{"ast":null,"code":"'use strict';\n\nconst color = require('color');\n\nconst is = require('./is');\n/**\n * Rotate the output image by either an explicit angle\n * or auto-orient based on the EXIF `Orientation` tag.\n *\n * If an angle is provided, it is converted to a valid positive degree rotation.\n * For example, `-450` will produce a 270deg rotation.\n *\n * When rotating by an angle other than a multiple of 90,\n * the background colour can be provided with the `background` option.\n *\n * If no angle is provided, it is determined from the EXIF data.\n * Mirroring is supported and may infer the use of a flip operation.\n *\n * The use of `rotate` implies the removal of the EXIF `Orientation` tag, if any.\n *\n * Method order is important when both rotating and extracting regions,\n * for example `rotate(x).extract(y)` will produce a different result to `extract(y).rotate(x)`.\n *\n * @example\n * const pipeline = sharp()\n *   .rotate()\n *   .resize(null, 200)\n *   .toBuffer(function (err, outputBuffer, info) {\n *     // outputBuffer contains 200px high JPEG image data,\n *     // auto-rotated using EXIF Orientation tag\n *     // info.width and info.height contain the dimensions of the resized image\n *   });\n * readableStream.pipe(pipeline);\n *\n * @param {Number} [angle=auto] angle of rotation.\n * @param {Object} [options] - if present, is an Object with optional attributes.\n * @param {String|Object} [options.background=\"#000000\"] parsed by the [color](https://www.npmjs.org/package/color) module to extract values for red, green, blue and alpha.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\n\nfunction rotate(angle, options) {\n  if (!is.defined(angle)) {\n    this.options.useExifOrientation = true;\n  } else if (is.integer(angle) && !(angle % 90)) {\n    this.options.angle = angle;\n  } else if (is.number(angle)) {\n    this.options.rotationAngle = angle;\n\n    if (is.object(options) && options.background) {\n      const backgroundColour = color(options.background);\n      this.options.rotationBackground = [backgroundColour.red(), backgroundColour.green(), backgroundColour.blue(), Math.round(backgroundColour.alpha() * 255)];\n    }\n  } else {\n    throw is.invalidParameterError('angle', 'numeric', angle);\n  }\n\n  return this;\n}\n/**\n * Flip the image about the vertical Y axis. This always occurs after rotation, if any.\n * The use of `flip` implies the removal of the EXIF `Orientation` tag, if any.\n * @param {Boolean} [flip=true]\n * @returns {Sharp}\n */\n\n\nfunction flip(flip) {\n  this.options.flip = is.bool(flip) ? flip : true;\n  return this;\n}\n/**\n * Flop the image about the horizontal X axis. This always occurs after rotation, if any.\n * The use of `flop` implies the removal of the EXIF `Orientation` tag, if any.\n * @param {Boolean} [flop=true]\n * @returns {Sharp}\n */\n\n\nfunction flop(flop) {\n  this.options.flop = is.bool(flop) ? flop : true;\n  return this;\n}\n/**\n * Sharpen the image.\n * When used without parameters, performs a fast, mild sharpen of the output image.\n * When a `sigma` is provided, performs a slower, more accurate sharpen of the L channel in the LAB colour space.\n * Separate control over the level of sharpening in \"flat\" and \"jagged\" areas is available.\n *\n * @param {Number} [sigma] - the sigma of the Gaussian mask, where `sigma = 1 + radius / 2`.\n * @param {Number} [flat=1.0] - the level of sharpening to apply to \"flat\" areas.\n * @param {Number} [jagged=2.0] - the level of sharpening to apply to \"jagged\" areas.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\n\nfunction sharpen(sigma, flat, jagged) {\n  if (!is.defined(sigma)) {\n    // No arguments: default to mild sharpen\n    this.options.sharpenSigma = -1;\n  } else if (is.bool(sigma)) {\n    // Boolean argument: apply mild sharpen?\n    this.options.sharpenSigma = sigma ? -1 : 0;\n  } else if (is.number(sigma) && is.inRange(sigma, 0.01, 10000)) {\n    // Numeric argument: specific sigma\n    this.options.sharpenSigma = sigma; // Control over flat areas\n\n    if (is.defined(flat)) {\n      if (is.number(flat) && is.inRange(flat, 0, 10000)) {\n        this.options.sharpenFlat = flat;\n      } else {\n        throw is.invalidParameterError('flat', 'number between 0 and 10000', flat);\n      }\n    } // Control over jagged areas\n\n\n    if (is.defined(jagged)) {\n      if (is.number(jagged) && is.inRange(jagged, 0, 10000)) {\n        this.options.sharpenJagged = jagged;\n      } else {\n        throw is.invalidParameterError('jagged', 'number between 0 and 10000', jagged);\n      }\n    }\n  } else {\n    throw is.invalidParameterError('sigma', 'number between 0.01 and 10000', sigma);\n  }\n\n  return this;\n}\n/**\n * Apply median filter.\n * When used without parameters the default window is 3x3.\n * @param {Number} [size=3] square mask size: size x size\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\n\nfunction median(size) {\n  if (!is.defined(size)) {\n    // No arguments: default to 3x3\n    this.options.medianSize = 3;\n  } else if (is.integer(size) && is.inRange(size, 1, 1000)) {\n    // Numeric argument: specific sigma\n    this.options.medianSize = size;\n  } else {\n    throw is.invalidParameterError('size', 'integer between 1 and 1000', size);\n  }\n\n  return this;\n}\n/**\n * Blur the image.\n * When used without parameters, performs a fast, mild blur of the output image.\n * When a `sigma` is provided, performs a slower, more accurate Gaussian blur.\n * @param {Number} [sigma] a value between 0.3 and 1000 representing the sigma of the Gaussian mask, where `sigma = 1 + radius / 2`.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\n\nfunction blur(sigma) {\n  if (!is.defined(sigma)) {\n    // No arguments: default to mild blur\n    this.options.blurSigma = -1;\n  } else if (is.bool(sigma)) {\n    // Boolean argument: apply mild blur?\n    this.options.blurSigma = sigma ? -1 : 0;\n  } else if (is.number(sigma) && is.inRange(sigma, 0.3, 1000)) {\n    // Numeric argument: specific sigma\n    this.options.blurSigma = sigma;\n  } else {\n    throw is.invalidParameterError('sigma', 'number between 0.3 and 1000', sigma);\n  }\n\n  return this;\n}\n/**\n * Merge alpha transparency channel, if any, with a background.\n * @param {Object} [options]\n * @param {String|Object} [options.background={r: 0, g: 0, b: 0}] - background colour, parsed by the [color](https://www.npmjs.org/package/color) module, defaults to black.\n * @returns {Sharp}\n */\n\n\nfunction flatten(options) {\n  this.options.flatten = is.bool(options) ? options : true;\n\n  if (is.object(options)) {\n    this._setBackgroundColourOption('flattenBackground', options.background);\n  }\n\n  return this;\n}\n/**\n * Apply a gamma correction by reducing the encoding (darken) pre-resize at a factor of `1/gamma`\n * then increasing the encoding (brighten) post-resize at a factor of `gamma`.\n * This can improve the perceived brightness of a resized image in non-linear colour spaces.\n * JPEG and WebP input images will not take advantage of the shrink-on-load performance optimisation\n * when applying a gamma correction.\n *\n * Supply a second argument to use a different output gamma value, otherwise the first value is used in both cases.\n *\n * @param {Number} [gamma=2.2] value between 1.0 and 3.0.\n * @param {Number} [gammaOut] value between 1.0 and 3.0. (optional, defaults to same as `gamma`)\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\n\nfunction gamma(gamma, gammaOut) {\n  if (!is.defined(gamma)) {\n    // Default gamma correction of 2.2 (sRGB)\n    this.options.gamma = 2.2;\n  } else if (is.number(gamma) && is.inRange(gamma, 1, 3)) {\n    this.options.gamma = gamma;\n  } else {\n    throw is.invalidParameterError('gamma', 'number between 1.0 and 3.0', gamma);\n  }\n\n  if (!is.defined(gammaOut)) {\n    // Default gamma correction for output is same as input\n    this.options.gammaOut = this.options.gamma;\n  } else if (is.number(gammaOut) && is.inRange(gammaOut, 1, 3)) {\n    this.options.gammaOut = gammaOut;\n  } else {\n    throw is.invalidParameterError('gammaOut', 'number between 1.0 and 3.0', gammaOut);\n  }\n\n  return this;\n}\n/**\n * Produce the \"negative\" of the image.\n * @param {Boolean} [negate=true]\n * @returns {Sharp}\n */\n\n\nfunction negate(negate) {\n  this.options.negate = is.bool(negate) ? negate : true;\n  return this;\n}\n/**\n * Enhance output image contrast by stretching its luminance to cover the full dynamic range.\n * @param {Boolean} [normalise=true]\n * @returns {Sharp}\n */\n\n\nfunction normalise(normalise) {\n  this.options.normalise = is.bool(normalise) ? normalise : true;\n  return this;\n}\n/**\n * Alternative spelling of normalise.\n * @param {Boolean} [normalize=true]\n * @returns {Sharp}\n */\n\n\nfunction normalize(normalize) {\n  return this.normalise(normalize);\n}\n/**\n * Convolve the image with the specified kernel.\n *\n * @example\n * sharp(input)\n *   .convolve({\n *     width: 3,\n *     height: 3,\n *     kernel: [-1, 0, 1, -2, 0, 2, -1, 0, 1]\n *   })\n *   .raw()\n *   .toBuffer(function(err, data, info) {\n *     // data contains the raw pixel data representing the convolution\n *     // of the input image with the horizontal Sobel operator\n *   });\n *\n * @param {Object} kernel\n * @param {Number} kernel.width - width of the kernel in pixels.\n * @param {Number} kernel.height - width of the kernel in pixels.\n * @param {Array<Number>} kernel.kernel - Array of length `width*height` containing the kernel values.\n * @param {Number} [kernel.scale=sum] - the scale of the kernel in pixels.\n * @param {Number} [kernel.offset=0] - the offset of the kernel in pixels.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\n\nfunction convolve(kernel) {\n  if (!is.object(kernel) || !Array.isArray(kernel.kernel) || !is.integer(kernel.width) || !is.integer(kernel.height) || !is.inRange(kernel.width, 3, 1001) || !is.inRange(kernel.height, 3, 1001) || kernel.height * kernel.width !== kernel.kernel.length) {\n    // must pass in a kernel\n    throw new Error('Invalid convolution kernel');\n  } // Default scale is sum of kernel values\n\n\n  if (!is.integer(kernel.scale)) {\n    kernel.scale = kernel.kernel.reduce(function (a, b) {\n      return a + b;\n    }, 0);\n  } // Clip scale to a minimum value of 1\n\n\n  if (kernel.scale < 1) {\n    kernel.scale = 1;\n  }\n\n  if (!is.integer(kernel.offset)) {\n    kernel.offset = 0;\n  }\n\n  this.options.convKernel = kernel;\n  return this;\n}\n/**\n * Any pixel value greather than or equal to the threshold value will be set to 255, otherwise it will be set to 0.\n * @param {Number} [threshold=128] - a value in the range 0-255 representing the level at which the threshold will be applied.\n * @param {Object} [options]\n * @param {Boolean} [options.greyscale=true] - convert to single channel greyscale.\n * @param {Boolean} [options.grayscale=true] - alternative spelling for greyscale.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\n\nfunction threshold(threshold, options) {\n  if (!is.defined(threshold)) {\n    this.options.threshold = 128;\n  } else if (is.bool(threshold)) {\n    this.options.threshold = threshold ? 128 : 0;\n  } else if (is.integer(threshold) && is.inRange(threshold, 0, 255)) {\n    this.options.threshold = threshold;\n  } else {\n    throw is.invalidParameterError('threshold', 'integer between 0 and 255', threshold);\n  }\n\n  if (!is.object(options) || options.greyscale === true || options.grayscale === true) {\n    this.options.thresholdGrayscale = true;\n  } else {\n    this.options.thresholdGrayscale = false;\n  }\n\n  return this;\n}\n/**\n * Perform a bitwise boolean operation with operand image.\n *\n * This operation creates an output image where each pixel is the result of\n * the selected bitwise boolean `operation` between the corresponding pixels of the input images.\n *\n * @param {Buffer|String} operand - Buffer containing image data or String containing the path to an image file.\n * @param {String} operator - one of `and`, `or` or `eor` to perform that bitwise operation, like the C logic operators `&`, `|` and `^` respectively.\n * @param {Object} [options]\n * @param {Object} [options.raw] - describes operand when using raw pixel data.\n * @param {Number} [options.raw.width]\n * @param {Number} [options.raw.height]\n * @param {Number} [options.raw.channels]\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\n\nfunction boolean(operand, operator, options) {\n  this.options.boolean = this._createInputDescriptor(operand, options);\n\n  if (is.string(operator) && is.inArray(operator, ['and', 'or', 'eor'])) {\n    this.options.booleanOp = operator;\n  } else {\n    throw is.invalidParameterError('operator', 'one of: and, or, eor', operator);\n  }\n\n  return this;\n}\n/**\n * Apply the linear formula a * input + b to the image (levels adjustment)\n * @param {Number} [a=1.0] multiplier\n * @param {Number} [b=0.0] offset\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\n\nfunction linear(a, b) {\n  if (!is.defined(a)) {\n    this.options.linearA = 1.0;\n  } else if (is.number(a)) {\n    this.options.linearA = a;\n  } else {\n    throw is.invalidParameterError('a', 'numeric', a);\n  }\n\n  if (!is.defined(b)) {\n    this.options.linearB = 0.0;\n  } else if (is.number(b)) {\n    this.options.linearB = b;\n  } else {\n    throw is.invalidParameterError('b', 'numeric', b);\n  }\n\n  return this;\n}\n/**\n * Recomb the image with the specified matrix.\n *\n * @since 0.21.1\n *\n * @example\n * sharp(input)\n *   .recomb([\n *    [0.3588, 0.7044, 0.1368],\n *    [0.2990, 0.5870, 0.1140],\n *    [0.2392, 0.4696, 0.0912],\n *   ])\n *   .raw()\n *   .toBuffer(function(err, data, info) {\n *     // data contains the raw pixel data after applying the recomb\n *     // With this example input, a sepia filter has been applied\n *   });\n *\n * @param {Array<Array<Number>>} 3x3 Recombination matrix\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\n\n\nfunction recomb(inputMatrix) {\n  if (!Array.isArray(inputMatrix) || inputMatrix.length !== 3 || inputMatrix[0].length !== 3 || inputMatrix[1].length !== 3 || inputMatrix[2].length !== 3) {\n    // must pass in a kernel\n    throw new Error('Invalid recombination matrix');\n  }\n\n  this.options.recombMatrix = [inputMatrix[0][0], inputMatrix[0][1], inputMatrix[0][2], inputMatrix[1][0], inputMatrix[1][1], inputMatrix[1][2], inputMatrix[2][0], inputMatrix[2][1], inputMatrix[2][2]].map(Number);\n  return this;\n}\n/**\n * Transforms the image using brightness, saturation and hue rotation.\n *\n * @since 0.22.1\n *\n * @example\n * sharp(input)\n *   .modulate({\n *     brightness: 2 // increase lightness by a factor of 2\n *   });\n *\n * sharp(input)\n *   .modulate({\n *     hue: 180 // hue-rotate by 180 degrees\n *   });\n *\n * // decreate brightness and saturation while also hue-rotating by 90 degrees\n * sharp(input)\n *   .modulate({\n *     brightness: 0.5,\n *     saturation: 0.5,\n *     hue: 90\n *   });\n *\n * @param {Object} [options]\n * @param {Number} [options.brightness] Brightness multiplier\n * @param {Number} [options.saturation] Saturation multiplier\n * @param {Number} [options.hue] Degrees for hue rotation\n * @returns {Sharp}\n */\n\n\nfunction modulate(options) {\n  if (!is.plainObject(options)) {\n    throw is.invalidParameterError('options', 'plain object', options);\n  }\n\n  if ('brightness' in options) {\n    if (is.number(options.brightness) && options.brightness >= 0) {\n      this.options.brightness = options.brightness;\n    } else {\n      throw is.invalidParameterError('brightness', 'number above zero', options.brightness);\n    }\n  }\n\n  if ('saturation' in options) {\n    if (is.number(options.saturation) && options.saturation >= 0) {\n      this.options.saturation = options.saturation;\n    } else {\n      throw is.invalidParameterError('saturation', 'number above zero', options.saturation);\n    }\n  }\n\n  if ('hue' in options) {\n    if (is.integer(options.hue)) {\n      this.options.hue = options.hue % 360;\n    } else {\n      throw is.invalidParameterError('hue', 'number', options.hue);\n    }\n  }\n\n  return this;\n}\n/**\n * Decorate the Sharp prototype with operation-related functions.\n * @private\n */\n\n\nmodule.exports = function (Sharp) {\n  Object.assign(Sharp.prototype, {\n    rotate,\n    flip,\n    flop,\n    sharpen,\n    median,\n    blur,\n    flatten,\n    gamma,\n    negate,\n    normalise,\n    normalize,\n    convolve,\n    threshold,\n    boolean,\n    linear,\n    recomb,\n    modulate\n  });\n};","map":{"version":3,"sources":["/media/gabriel/HD/Cursos/OmniStack 7.0/aulas/node_modules/sharp/lib/operation.js"],"names":["color","require","is","rotate","angle","options","defined","useExifOrientation","integer","number","rotationAngle","object","background","backgroundColour","rotationBackground","red","green","blue","Math","round","alpha","invalidParameterError","flip","bool","flop","sharpen","sigma","flat","jagged","sharpenSigma","inRange","sharpenFlat","sharpenJagged","median","size","medianSize","blur","blurSigma","flatten","_setBackgroundColourOption","gamma","gammaOut","negate","normalise","normalize","convolve","kernel","Array","isArray","width","height","length","Error","scale","reduce","a","b","offset","convKernel","threshold","greyscale","grayscale","thresholdGrayscale","boolean","operand","operator","_createInputDescriptor","string","inArray","booleanOp","linear","linearA","linearB","recomb","inputMatrix","recombMatrix","map","Number","modulate","plainObject","brightness","saturation","hue","module","exports","Sharp","Object","assign","prototype"],"mappings":"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","sourcesContent":["'use strict';\n\nconst color = require('color');\nconst is = require('./is');\n\n/**\n * Rotate the output image by either an explicit angle\n * or auto-orient based on the EXIF `Orientation` tag.\n *\n * If an angle is provided, it is converted to a valid positive degree rotation.\n * For example, `-450` will produce a 270deg rotation.\n *\n * When rotating by an angle other than a multiple of 90,\n * the background colour can be provided with the `background` option.\n *\n * If no angle is provided, it is determined from the EXIF data.\n * Mirroring is supported and may infer the use of a flip operation.\n *\n * The use of `rotate` implies the removal of the EXIF `Orientation` tag, if any.\n *\n * Method order is important when both rotating and extracting regions,\n * for example `rotate(x).extract(y)` will produce a different result to `extract(y).rotate(x)`.\n *\n * @example\n * const pipeline = sharp()\n *   .rotate()\n *   .resize(null, 200)\n *   .toBuffer(function (err, outputBuffer, info) {\n *     // outputBuffer contains 200px high JPEG image data,\n *     // auto-rotated using EXIF Orientation tag\n *     // info.width and info.height contain the dimensions of the resized image\n *   });\n * readableStream.pipe(pipeline);\n *\n * @param {Number} [angle=auto] angle of rotation.\n * @param {Object} [options] - if present, is an Object with optional attributes.\n * @param {String|Object} [options.background=\"#000000\"] parsed by the [color](https://www.npmjs.org/package/color) module to extract values for red, green, blue and alpha.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction rotate (angle, options) {\n  if (!is.defined(angle)) {\n    this.options.useExifOrientation = true;\n  } else if (is.integer(angle) && !(angle % 90)) {\n    this.options.angle = angle;\n  } else if (is.number(angle)) {\n    this.options.rotationAngle = angle;\n    if (is.object(options) && options.background) {\n      const backgroundColour = color(options.background);\n      this.options.rotationBackground = [\n        backgroundColour.red(),\n        backgroundColour.green(),\n        backgroundColour.blue(),\n        Math.round(backgroundColour.alpha() * 255)\n      ];\n    }\n  } else {\n    throw is.invalidParameterError('angle', 'numeric', angle);\n  }\n  return this;\n}\n\n/**\n * Flip the image about the vertical Y axis. This always occurs after rotation, if any.\n * The use of `flip` implies the removal of the EXIF `Orientation` tag, if any.\n * @param {Boolean} [flip=true]\n * @returns {Sharp}\n */\nfunction flip (flip) {\n  this.options.flip = is.bool(flip) ? flip : true;\n  return this;\n}\n\n/**\n * Flop the image about the horizontal X axis. This always occurs after rotation, if any.\n * The use of `flop` implies the removal of the EXIF `Orientation` tag, if any.\n * @param {Boolean} [flop=true]\n * @returns {Sharp}\n */\nfunction flop (flop) {\n  this.options.flop = is.bool(flop) ? flop : true;\n  return this;\n}\n\n/**\n * Sharpen the image.\n * When used without parameters, performs a fast, mild sharpen of the output image.\n * When a `sigma` is provided, performs a slower, more accurate sharpen of the L channel in the LAB colour space.\n * Separate control over the level of sharpening in \"flat\" and \"jagged\" areas is available.\n *\n * @param {Number} [sigma] - the sigma of the Gaussian mask, where `sigma = 1 + radius / 2`.\n * @param {Number} [flat=1.0] - the level of sharpening to apply to \"flat\" areas.\n * @param {Number} [jagged=2.0] - the level of sharpening to apply to \"jagged\" areas.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction sharpen (sigma, flat, jagged) {\n  if (!is.defined(sigma)) {\n    // No arguments: default to mild sharpen\n    this.options.sharpenSigma = -1;\n  } else if (is.bool(sigma)) {\n    // Boolean argument: apply mild sharpen?\n    this.options.sharpenSigma = sigma ? -1 : 0;\n  } else if (is.number(sigma) && is.inRange(sigma, 0.01, 10000)) {\n    // Numeric argument: specific sigma\n    this.options.sharpenSigma = sigma;\n    // Control over flat areas\n    if (is.defined(flat)) {\n      if (is.number(flat) && is.inRange(flat, 0, 10000)) {\n        this.options.sharpenFlat = flat;\n      } else {\n        throw is.invalidParameterError('flat', 'number between 0 and 10000', flat);\n      }\n    }\n    // Control over jagged areas\n    if (is.defined(jagged)) {\n      if (is.number(jagged) && is.inRange(jagged, 0, 10000)) {\n        this.options.sharpenJagged = jagged;\n      } else {\n        throw is.invalidParameterError('jagged', 'number between 0 and 10000', jagged);\n      }\n    }\n  } else {\n    throw is.invalidParameterError('sigma', 'number between 0.01 and 10000', sigma);\n  }\n  return this;\n}\n\n/**\n * Apply median filter.\n * When used without parameters the default window is 3x3.\n * @param {Number} [size=3] square mask size: size x size\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction median (size) {\n  if (!is.defined(size)) {\n    // No arguments: default to 3x3\n    this.options.medianSize = 3;\n  } else if (is.integer(size) && is.inRange(size, 1, 1000)) {\n    // Numeric argument: specific sigma\n    this.options.medianSize = size;\n  } else {\n    throw is.invalidParameterError('size', 'integer between 1 and 1000', size);\n  }\n  return this;\n}\n\n/**\n * Blur the image.\n * When used without parameters, performs a fast, mild blur of the output image.\n * When a `sigma` is provided, performs a slower, more accurate Gaussian blur.\n * @param {Number} [sigma] a value between 0.3 and 1000 representing the sigma of the Gaussian mask, where `sigma = 1 + radius / 2`.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction blur (sigma) {\n  if (!is.defined(sigma)) {\n    // No arguments: default to mild blur\n    this.options.blurSigma = -1;\n  } else if (is.bool(sigma)) {\n    // Boolean argument: apply mild blur?\n    this.options.blurSigma = sigma ? -1 : 0;\n  } else if (is.number(sigma) && is.inRange(sigma, 0.3, 1000)) {\n    // Numeric argument: specific sigma\n    this.options.blurSigma = sigma;\n  } else {\n    throw is.invalidParameterError('sigma', 'number between 0.3 and 1000', sigma);\n  }\n  return this;\n}\n\n/**\n * Merge alpha transparency channel, if any, with a background.\n * @param {Object} [options]\n * @param {String|Object} [options.background={r: 0, g: 0, b: 0}] - background colour, parsed by the [color](https://www.npmjs.org/package/color) module, defaults to black.\n * @returns {Sharp}\n */\nfunction flatten (options) {\n  this.options.flatten = is.bool(options) ? options : true;\n  if (is.object(options)) {\n    this._setBackgroundColourOption('flattenBackground', options.background);\n  }\n  return this;\n}\n\n/**\n * Apply a gamma correction by reducing the encoding (darken) pre-resize at a factor of `1/gamma`\n * then increasing the encoding (brighten) post-resize at a factor of `gamma`.\n * This can improve the perceived brightness of a resized image in non-linear colour spaces.\n * JPEG and WebP input images will not take advantage of the shrink-on-load performance optimisation\n * when applying a gamma correction.\n *\n * Supply a second argument to use a different output gamma value, otherwise the first value is used in both cases.\n *\n * @param {Number} [gamma=2.2] value between 1.0 and 3.0.\n * @param {Number} [gammaOut] value between 1.0 and 3.0. (optional, defaults to same as `gamma`)\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction gamma (gamma, gammaOut) {\n  if (!is.defined(gamma)) {\n    // Default gamma correction of 2.2 (sRGB)\n    this.options.gamma = 2.2;\n  } else if (is.number(gamma) && is.inRange(gamma, 1, 3)) {\n    this.options.gamma = gamma;\n  } else {\n    throw is.invalidParameterError('gamma', 'number between 1.0 and 3.0', gamma);\n  }\n  if (!is.defined(gammaOut)) {\n    // Default gamma correction for output is same as input\n    this.options.gammaOut = this.options.gamma;\n  } else if (is.number(gammaOut) && is.inRange(gammaOut, 1, 3)) {\n    this.options.gammaOut = gammaOut;\n  } else {\n    throw is.invalidParameterError('gammaOut', 'number between 1.0 and 3.0', gammaOut);\n  }\n  return this;\n}\n\n/**\n * Produce the \"negative\" of the image.\n * @param {Boolean} [negate=true]\n * @returns {Sharp}\n */\nfunction negate (negate) {\n  this.options.negate = is.bool(negate) ? negate : true;\n  return this;\n}\n\n/**\n * Enhance output image contrast by stretching its luminance to cover the full dynamic range.\n * @param {Boolean} [normalise=true]\n * @returns {Sharp}\n */\nfunction normalise (normalise) {\n  this.options.normalise = is.bool(normalise) ? normalise : true;\n  return this;\n}\n\n/**\n * Alternative spelling of normalise.\n * @param {Boolean} [normalize=true]\n * @returns {Sharp}\n */\nfunction normalize (normalize) {\n  return this.normalise(normalize);\n}\n\n/**\n * Convolve the image with the specified kernel.\n *\n * @example\n * sharp(input)\n *   .convolve({\n *     width: 3,\n *     height: 3,\n *     kernel: [-1, 0, 1, -2, 0, 2, -1, 0, 1]\n *   })\n *   .raw()\n *   .toBuffer(function(err, data, info) {\n *     // data contains the raw pixel data representing the convolution\n *     // of the input image with the horizontal Sobel operator\n *   });\n *\n * @param {Object} kernel\n * @param {Number} kernel.width - width of the kernel in pixels.\n * @param {Number} kernel.height - width of the kernel in pixels.\n * @param {Array<Number>} kernel.kernel - Array of length `width*height` containing the kernel values.\n * @param {Number} [kernel.scale=sum] - the scale of the kernel in pixels.\n * @param {Number} [kernel.offset=0] - the offset of the kernel in pixels.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction convolve (kernel) {\n  if (!is.object(kernel) || !Array.isArray(kernel.kernel) ||\n      !is.integer(kernel.width) || !is.integer(kernel.height) ||\n      !is.inRange(kernel.width, 3, 1001) || !is.inRange(kernel.height, 3, 1001) ||\n      kernel.height * kernel.width !== kernel.kernel.length\n  ) {\n    // must pass in a kernel\n    throw new Error('Invalid convolution kernel');\n  }\n  // Default scale is sum of kernel values\n  if (!is.integer(kernel.scale)) {\n    kernel.scale = kernel.kernel.reduce(function (a, b) {\n      return a + b;\n    }, 0);\n  }\n  // Clip scale to a minimum value of 1\n  if (kernel.scale < 1) {\n    kernel.scale = 1;\n  }\n  if (!is.integer(kernel.offset)) {\n    kernel.offset = 0;\n  }\n  this.options.convKernel = kernel;\n  return this;\n}\n\n/**\n * Any pixel value greather than or equal to the threshold value will be set to 255, otherwise it will be set to 0.\n * @param {Number} [threshold=128] - a value in the range 0-255 representing the level at which the threshold will be applied.\n * @param {Object} [options]\n * @param {Boolean} [options.greyscale=true] - convert to single channel greyscale.\n * @param {Boolean} [options.grayscale=true] - alternative spelling for greyscale.\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction threshold (threshold, options) {\n  if (!is.defined(threshold)) {\n    this.options.threshold = 128;\n  } else if (is.bool(threshold)) {\n    this.options.threshold = threshold ? 128 : 0;\n  } else if (is.integer(threshold) && is.inRange(threshold, 0, 255)) {\n    this.options.threshold = threshold;\n  } else {\n    throw is.invalidParameterError('threshold', 'integer between 0 and 255', threshold);\n  }\n  if (!is.object(options) || options.greyscale === true || options.grayscale === true) {\n    this.options.thresholdGrayscale = true;\n  } else {\n    this.options.thresholdGrayscale = false;\n  }\n  return this;\n}\n\n/**\n * Perform a bitwise boolean operation with operand image.\n *\n * This operation creates an output image where each pixel is the result of\n * the selected bitwise boolean `operation` between the corresponding pixels of the input images.\n *\n * @param {Buffer|String} operand - Buffer containing image data or String containing the path to an image file.\n * @param {String} operator - one of `and`, `or` or `eor` to perform that bitwise operation, like the C logic operators `&`, `|` and `^` respectively.\n * @param {Object} [options]\n * @param {Object} [options.raw] - describes operand when using raw pixel data.\n * @param {Number} [options.raw.width]\n * @param {Number} [options.raw.height]\n * @param {Number} [options.raw.channels]\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction boolean (operand, operator, options) {\n  this.options.boolean = this._createInputDescriptor(operand, options);\n  if (is.string(operator) && is.inArray(operator, ['and', 'or', 'eor'])) {\n    this.options.booleanOp = operator;\n  } else {\n    throw is.invalidParameterError('operator', 'one of: and, or, eor', operator);\n  }\n  return this;\n}\n\n/**\n * Apply the linear formula a * input + b to the image (levels adjustment)\n * @param {Number} [a=1.0] multiplier\n * @param {Number} [b=0.0] offset\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction linear (a, b) {\n  if (!is.defined(a)) {\n    this.options.linearA = 1.0;\n  } else if (is.number(a)) {\n    this.options.linearA = a;\n  } else {\n    throw is.invalidParameterError('a', 'numeric', a);\n  }\n  if (!is.defined(b)) {\n    this.options.linearB = 0.0;\n  } else if (is.number(b)) {\n    this.options.linearB = b;\n  } else {\n    throw is.invalidParameterError('b', 'numeric', b);\n  }\n  return this;\n}\n\n/**\n * Recomb the image with the specified matrix.\n *\n * @since 0.21.1\n *\n * @example\n * sharp(input)\n *   .recomb([\n *    [0.3588, 0.7044, 0.1368],\n *    [0.2990, 0.5870, 0.1140],\n *    [0.2392, 0.4696, 0.0912],\n *   ])\n *   .raw()\n *   .toBuffer(function(err, data, info) {\n *     // data contains the raw pixel data after applying the recomb\n *     // With this example input, a sepia filter has been applied\n *   });\n *\n * @param {Array<Array<Number>>} 3x3 Recombination matrix\n * @returns {Sharp}\n * @throws {Error} Invalid parameters\n */\nfunction recomb (inputMatrix) {\n  if (!Array.isArray(inputMatrix) || inputMatrix.length !== 3 ||\n      inputMatrix[0].length !== 3 ||\n      inputMatrix[1].length !== 3 ||\n      inputMatrix[2].length !== 3\n  ) {\n    // must pass in a kernel\n    throw new Error('Invalid recombination matrix');\n  }\n  this.options.recombMatrix = [\n    inputMatrix[0][0], inputMatrix[0][1], inputMatrix[0][2],\n    inputMatrix[1][0], inputMatrix[1][1], inputMatrix[1][2],\n    inputMatrix[2][0], inputMatrix[2][1], inputMatrix[2][2]\n  ].map(Number);\n  return this;\n}\n\n/**\n * Transforms the image using brightness, saturation and hue rotation.\n *\n * @since 0.22.1\n *\n * @example\n * sharp(input)\n *   .modulate({\n *     brightness: 2 // increase lightness by a factor of 2\n *   });\n *\n * sharp(input)\n *   .modulate({\n *     hue: 180 // hue-rotate by 180 degrees\n *   });\n *\n * // decreate brightness and saturation while also hue-rotating by 90 degrees\n * sharp(input)\n *   .modulate({\n *     brightness: 0.5,\n *     saturation: 0.5,\n *     hue: 90\n *   });\n *\n * @param {Object} [options]\n * @param {Number} [options.brightness] Brightness multiplier\n * @param {Number} [options.saturation] Saturation multiplier\n * @param {Number} [options.hue] Degrees for hue rotation\n * @returns {Sharp}\n */\nfunction modulate (options) {\n  if (!is.plainObject(options)) {\n    throw is.invalidParameterError('options', 'plain object', options);\n  }\n  if ('brightness' in options) {\n    if (is.number(options.brightness) && options.brightness >= 0) {\n      this.options.brightness = options.brightness;\n    } else {\n      throw is.invalidParameterError('brightness', 'number above zero', options.brightness);\n    }\n  }\n  if ('saturation' in options) {\n    if (is.number(options.saturation) && options.saturation >= 0) {\n      this.options.saturation = options.saturation;\n    } else {\n      throw is.invalidParameterError('saturation', 'number above zero', options.saturation);\n    }\n  }\n  if ('hue' in options) {\n    if (is.integer(options.hue)) {\n      this.options.hue = options.hue % 360;\n    } else {\n      throw is.invalidParameterError('hue', 'number', options.hue);\n    }\n  }\n  return this;\n}\n\n/**\n * Decorate the Sharp prototype with operation-related functions.\n * @private\n */\nmodule.exports = function (Sharp) {\n  Object.assign(Sharp.prototype, {\n    rotate,\n    flip,\n    flop,\n    sharpen,\n    median,\n    blur,\n    flatten,\n    gamma,\n    negate,\n    normalise,\n    normalize,\n    convolve,\n    threshold,\n    boolean,\n    linear,\n    recomb,\n    modulate\n  });\n};\n"]},"metadata":{},"sourceType":"script"}