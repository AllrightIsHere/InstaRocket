{"ast":null,"code":"'use strict';\n\nconst events = require('events');\n\nconst is = require('./is');\n\nconst sharp = require('../build/Release/sharp.node');\n/**\n * An Object containing nested boolean values representing the available input and output formats/methods.\n * @member\n * @example\n * console.log(sharp.format);\n * @returns {Object}\n */\n\n\nconst format = sharp.format();\n/**\n * An Object containing the version numbers of libvips and its dependencies.\n * @member\n * @example\n * console.log(sharp.versions);\n */\n\nlet versions = {\n  vips: sharp.libvipsVersion()\n};\n\ntry {\n  versions = require('../vendor/versions.json');\n} catch (err) {}\n/**\n * Gets or, when options are provided, sets the limits of _libvips'_ operation cache.\n * Existing entries in the cache will be trimmed after any change in limits.\n * This method always returns cache statistics,\n * useful for determining how much working memory is required for a particular task.\n *\n * @example\n * const stats = sharp.cache();\n * @example\n * sharp.cache( { items: 200 } );\n * sharp.cache( { files: 0 } );\n * sharp.cache(false);\n *\n * @param {Object|Boolean} [options=true] - Object with the following attributes, or Boolean where true uses default cache settings and false removes all caching\n * @param {Number} [options.memory=50] - is the maximum memory in MB to use for this cache\n * @param {Number} [options.files=20] - is the maximum number of files to hold open\n * @param {Number} [options.items=100] - is the maximum number of operations to cache\n * @returns {Object}\n */\n\n\nfunction cache(options) {\n  if (is.bool(options)) {\n    if (options) {\n      // Default cache settings of 50MB, 20 files, 100 items\n      return sharp.cache(50, 20, 100);\n    } else {\n      return sharp.cache(0, 0, 0);\n    }\n  } else if (is.object(options)) {\n    return sharp.cache(options.memory, options.files, options.items);\n  } else {\n    return sharp.cache();\n  }\n}\n\ncache(true);\n/**\n * Gets or, when a concurrency is provided, sets\n * the number of threads _libvips'_ should create to process each image.\n * The default value is the number of CPU cores.\n * A value of `0` will reset to this default.\n *\n * The maximum number of images that can be processed in parallel\n * is limited by libuv's `UV_THREADPOOL_SIZE` environment variable.\n *\n * This method always returns the current concurrency.\n *\n * @example\n * const threads = sharp.concurrency(); // 4\n * sharp.concurrency(2); // 2\n * sharp.concurrency(0); // 4\n *\n * @param {Number} [concurrency]\n * @returns {Number} concurrency\n */\n\nfunction concurrency(concurrency) {\n  return sharp.concurrency(is.integer(concurrency) ? concurrency : null);\n}\n/**\n * An EventEmitter that emits a `change` event when a task is either:\n * - queued, waiting for _libuv_ to provide a worker thread\n * - complete\n * @member\n * @example\n * sharp.queue.on('change', function(queueLength) {\n *   console.log('Queue contains ' + queueLength + ' task(s)');\n * });\n */\n\n\nconst queue = new events.EventEmitter();\n/**\n * Provides access to internal task counters.\n * - queue is the number of tasks this module has queued waiting for _libuv_ to provide a worker thread from its pool.\n * - process is the number of resize tasks currently being processed.\n *\n * @example\n * const counters = sharp.counters(); // { queue: 2, process: 4 }\n *\n * @returns {Object}\n */\n\nfunction counters() {\n  return sharp.counters();\n}\n/**\n * Get and set use of SIMD vector unit instructions.\n * Requires libvips to have been compiled with liborc support.\n *\n * Improves the performance of `resize`, `blur` and `sharpen` operations\n * by taking advantage of the SIMD vector unit of the CPU, e.g. Intel SSE and ARM NEON.\n *\n * @example\n * const simd = sharp.simd();\n * // simd is `true` if the runtime use of liborc is currently enabled\n * @example\n * const simd = sharp.simd(false);\n * // prevent libvips from using liborc at runtime\n *\n * @param {Boolean} [simd=true]\n * @returns {Boolean}\n */\n\n\nfunction simd(simd) {\n  return sharp.simd(is.bool(simd) ? simd : null);\n}\n\nsimd(true);\n/**\n * Decorate the Sharp class with utility-related functions.\n * @private\n */\n\nmodule.exports = function (Sharp) {\n  [cache, concurrency, counters, simd].forEach(function (f) {\n    Sharp[f.name] = f;\n  });\n  Sharp.format = format;\n  Sharp.versions = versions;\n  Sharp.queue = queue;\n};","map":{"version":3,"sources":["/media/gabriel/HD/Cursos/OmniStack 7.0/aulas/node_modules/sharp/lib/utility.js"],"names":["events","require","is","sharp","format","versions","vips","libvipsVersion","err","cache","options","bool","object","memory","files","items","concurrency","integer","queue","EventEmitter","counters","simd","module","exports","Sharp","forEach","f","name"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,MAAD,CAAlB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,6BAAD,CAArB;AAEA;;;;;;;;;AAOA,MAAMG,MAAM,GAAGD,KAAK,CAACC,MAAN,EAAf;AAEA;;;;;;;AAMA,IAAIC,QAAQ,GAAG;AACbC,EAAAA,IAAI,EAAEH,KAAK,CAACI,cAAN;AADO,CAAf;;AAGA,IAAI;AACFF,EAAAA,QAAQ,GAAGJ,OAAO,CAAC,yBAAD,CAAlB;AACD,CAFD,CAEE,OAAOO,GAAP,EAAY,CAAE;AAEhB;;;;;;;;;;;;;;;;;;;;;AAmBA,SAASC,KAAT,CAAgBC,OAAhB,EAAyB;AACvB,MAAIR,EAAE,CAACS,IAAH,CAAQD,OAAR,CAAJ,EAAsB;AACpB,QAAIA,OAAJ,EAAa;AACX;AACA,aAAOP,KAAK,CAACM,KAAN,CAAY,EAAZ,EAAgB,EAAhB,EAAoB,GAApB,CAAP;AACD,KAHD,MAGO;AACL,aAAON,KAAK,CAACM,KAAN,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAAP;AACD;AACF,GAPD,MAOO,IAAIP,EAAE,CAACU,MAAH,CAAUF,OAAV,CAAJ,EAAwB;AAC7B,WAAOP,KAAK,CAACM,KAAN,CAAYC,OAAO,CAACG,MAApB,EAA4BH,OAAO,CAACI,KAApC,EAA2CJ,OAAO,CAACK,KAAnD,CAAP;AACD,GAFM,MAEA;AACL,WAAOZ,KAAK,CAACM,KAAN,EAAP;AACD;AACF;;AACDA,KAAK,CAAC,IAAD,CAAL;AAEA;;;;;;;;;;;;;;;;;;;;AAmBA,SAASO,WAAT,CAAsBA,WAAtB,EAAmC;AACjC,SAAOb,KAAK,CAACa,WAAN,CAAkBd,EAAE,CAACe,OAAH,CAAWD,WAAX,IAA0BA,WAA1B,GAAwC,IAA1D,CAAP;AACD;AAED;;;;;;;;;;;;AAUA,MAAME,KAAK,GAAG,IAAIlB,MAAM,CAACmB,YAAX,EAAd;AAEA;;;;;;;;;;;AAUA,SAASC,QAAT,GAAqB;AACnB,SAAOjB,KAAK,CAACiB,QAAN,EAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;AAiBA,SAASC,IAAT,CAAeA,IAAf,EAAqB;AACnB,SAAOlB,KAAK,CAACkB,IAAN,CAAWnB,EAAE,CAACS,IAAH,CAAQU,IAAR,IAAgBA,IAAhB,GAAuB,IAAlC,CAAP;AACD;;AACDA,IAAI,CAAC,IAAD,CAAJ;AAEA;;;;;AAIAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,KAAV,EAAiB;AAChC,GACEf,KADF,EAEEO,WAFF,EAGEI,QAHF,EAIEC,IAJF,EAKEI,OALF,CAKU,UAAUC,CAAV,EAAa;AACrBF,IAAAA,KAAK,CAACE,CAAC,CAACC,IAAH,CAAL,GAAgBD,CAAhB;AACD,GAPD;AAQAF,EAAAA,KAAK,CAACpB,MAAN,GAAeA,MAAf;AACAoB,EAAAA,KAAK,CAACnB,QAAN,GAAiBA,QAAjB;AACAmB,EAAAA,KAAK,CAACN,KAAN,GAAcA,KAAd;AACD,CAZD","sourcesContent":["'use strict';\n\nconst events = require('events');\nconst is = require('./is');\nconst sharp = require('../build/Release/sharp.node');\n\n/**\n * An Object containing nested boolean values representing the available input and output formats/methods.\n * @member\n * @example\n * console.log(sharp.format);\n * @returns {Object}\n */\nconst format = sharp.format();\n\n/**\n * An Object containing the version numbers of libvips and its dependencies.\n * @member\n * @example\n * console.log(sharp.versions);\n */\nlet versions = {\n  vips: sharp.libvipsVersion()\n};\ntry {\n  versions = require('../vendor/versions.json');\n} catch (err) {}\n\n/**\n * Gets or, when options are provided, sets the limits of _libvips'_ operation cache.\n * Existing entries in the cache will be trimmed after any change in limits.\n * This method always returns cache statistics,\n * useful for determining how much working memory is required for a particular task.\n *\n * @example\n * const stats = sharp.cache();\n * @example\n * sharp.cache( { items: 200 } );\n * sharp.cache( { files: 0 } );\n * sharp.cache(false);\n *\n * @param {Object|Boolean} [options=true] - Object with the following attributes, or Boolean where true uses default cache settings and false removes all caching\n * @param {Number} [options.memory=50] - is the maximum memory in MB to use for this cache\n * @param {Number} [options.files=20] - is the maximum number of files to hold open\n * @param {Number} [options.items=100] - is the maximum number of operations to cache\n * @returns {Object}\n */\nfunction cache (options) {\n  if (is.bool(options)) {\n    if (options) {\n      // Default cache settings of 50MB, 20 files, 100 items\n      return sharp.cache(50, 20, 100);\n    } else {\n      return sharp.cache(0, 0, 0);\n    }\n  } else if (is.object(options)) {\n    return sharp.cache(options.memory, options.files, options.items);\n  } else {\n    return sharp.cache();\n  }\n}\ncache(true);\n\n/**\n * Gets or, when a concurrency is provided, sets\n * the number of threads _libvips'_ should create to process each image.\n * The default value is the number of CPU cores.\n * A value of `0` will reset to this default.\n *\n * The maximum number of images that can be processed in parallel\n * is limited by libuv's `UV_THREADPOOL_SIZE` environment variable.\n *\n * This method always returns the current concurrency.\n *\n * @example\n * const threads = sharp.concurrency(); // 4\n * sharp.concurrency(2); // 2\n * sharp.concurrency(0); // 4\n *\n * @param {Number} [concurrency]\n * @returns {Number} concurrency\n */\nfunction concurrency (concurrency) {\n  return sharp.concurrency(is.integer(concurrency) ? concurrency : null);\n}\n\n/**\n * An EventEmitter that emits a `change` event when a task is either:\n * - queued, waiting for _libuv_ to provide a worker thread\n * - complete\n * @member\n * @example\n * sharp.queue.on('change', function(queueLength) {\n *   console.log('Queue contains ' + queueLength + ' task(s)');\n * });\n */\nconst queue = new events.EventEmitter();\n\n/**\n * Provides access to internal task counters.\n * - queue is the number of tasks this module has queued waiting for _libuv_ to provide a worker thread from its pool.\n * - process is the number of resize tasks currently being processed.\n *\n * @example\n * const counters = sharp.counters(); // { queue: 2, process: 4 }\n *\n * @returns {Object}\n */\nfunction counters () {\n  return sharp.counters();\n}\n\n/**\n * Get and set use of SIMD vector unit instructions.\n * Requires libvips to have been compiled with liborc support.\n *\n * Improves the performance of `resize`, `blur` and `sharpen` operations\n * by taking advantage of the SIMD vector unit of the CPU, e.g. Intel SSE and ARM NEON.\n *\n * @example\n * const simd = sharp.simd();\n * // simd is `true` if the runtime use of liborc is currently enabled\n * @example\n * const simd = sharp.simd(false);\n * // prevent libvips from using liborc at runtime\n *\n * @param {Boolean} [simd=true]\n * @returns {Boolean}\n */\nfunction simd (simd) {\n  return sharp.simd(is.bool(simd) ? simd : null);\n}\nsimd(true);\n\n/**\n * Decorate the Sharp class with utility-related functions.\n * @private\n */\nmodule.exports = function (Sharp) {\n  [\n    cache,\n    concurrency,\n    counters,\n    simd\n  ].forEach(function (f) {\n    Sharp[f.name] = f;\n  });\n  Sharp.format = format;\n  Sharp.versions = versions;\n  Sharp.queue = queue;\n};\n"]},"metadata":{},"sourceType":"script"}