{"ast":null,"code":"'use strict';\n\nconst fs = require('fs');\n\nconst os = require('os');\n\nconst path = require('path');\n\nconst spawnSync = require('child_process').spawnSync;\n\nconst semver = require('semver');\n\nconst platform = require('./platform');\n\nconst env = process.env;\n\nconst minimumLibvipsVersion = env.npm_package_config_libvips ||\n/* istanbul ignore next */\nrequire('../package.json').config.libvips;\n\nconst spawnSyncOptions = {\n  encoding: 'utf8',\n  shell: true\n};\n\nconst mkdirSync = function (dirPath) {\n  try {\n    fs.mkdirSync(dirPath);\n  } catch (err) {\n    /* istanbul ignore if */\n    if (err.code !== 'EEXIST') {\n      throw err;\n    }\n  }\n};\n\nconst cachePath = function () {\n  const npmCachePath = env.npm_config_cache || (\n  /* istanbul ignore next */\n  env.APPDATA ? path.join(env.APPDATA, 'npm-cache') : path.join(os.homedir(), '.npm'));\n  mkdirSync(npmCachePath);\n  const libvipsCachePath = path.join(npmCachePath, '_libvips');\n  mkdirSync(libvipsCachePath);\n  return libvipsCachePath;\n};\n\nconst globalLibvipsVersion = function () {\n  if (process.platform !== 'win32') {\n    const globalLibvipsVersion = spawnSync(`PKG_CONFIG_PATH=\"${pkgConfigPath()}\" pkg-config --modversion vips-cpp`, spawnSyncOptions).stdout || '';\n    return globalLibvipsVersion.trim();\n  } else {\n    return '';\n  }\n};\n\nconst hasVendoredLibvips = function () {\n  const currentPlatformId = platform();\n  const vendorPath = path.join(__dirname, '..', 'vendor');\n  let vendorVersionId;\n  let vendorPlatformId;\n\n  try {\n    vendorVersionId = require(path.join(vendorPath, 'versions.json')).vips;\n    vendorPlatformId = require(path.join(vendorPath, 'platform.json'));\n  } catch (err) {}\n  /* istanbul ignore if */\n\n\n  if (vendorVersionId && vendorVersionId !== minimumLibvipsVersion) {\n    throw new Error(`Found vendored libvips v${vendorVersionId} but require v${minimumLibvipsVersion}. Please remove the 'node_modules/sharp/vendor' directory and run 'npm install'.`);\n  }\n  /* istanbul ignore else */\n\n\n  if (vendorPlatformId) {\n    /* istanbul ignore else */\n    if (currentPlatformId === vendorPlatformId) {\n      return true;\n    } else {\n      throw new Error(`'${vendorPlatformId}' binaries cannot be used on the '${currentPlatformId}' platform. Please remove the 'node_modules/sharp/vendor' directory and run 'npm install'.`);\n    }\n  } else {\n    return false;\n  }\n};\n\nconst pkgConfigPath = function () {\n  if (process.platform !== 'win32') {\n    const brewPkgConfigPath = spawnSync('which brew >/dev/null 2>&1 && eval $(brew --env) && echo $PKG_CONFIG_LIBDIR', spawnSyncOptions).stdout || '';\n    return [brewPkgConfigPath.trim(), env.PKG_CONFIG_PATH, '/usr/local/lib/pkgconfig', '/usr/lib/pkgconfig'].filter(function (p) {\n      return !!p;\n    }).join(':');\n  } else {\n    return '';\n  }\n};\n\nconst useGlobalLibvips = function () {\n  if (Boolean(env.SHARP_IGNORE_GLOBAL_LIBVIPS) === true) {\n    return false;\n  }\n\n  const globalVipsVersion = globalLibvipsVersion();\n  return !!globalVipsVersion &&\n  /* istanbul ignore next */\n  semver.gte(globalVipsVersion, minimumLibvipsVersion);\n};\n\nmodule.exports = {\n  minimumLibvipsVersion: minimumLibvipsVersion,\n  cachePath: cachePath,\n  globalLibvipsVersion: globalLibvipsVersion,\n  hasVendoredLibvips: hasVendoredLibvips,\n  pkgConfigPath: pkgConfigPath,\n  useGlobalLibvips: useGlobalLibvips,\n  mkdirSync: mkdirSync\n};","map":{"version":3,"sources":["/media/gabriel/HD/Cursos/OmniStack 7.0/aulas/node_modules/sharp/lib/libvips.js"],"names":["fs","require","os","path","spawnSync","semver","platform","env","process","minimumLibvipsVersion","npm_package_config_libvips","config","libvips","spawnSyncOptions","encoding","shell","mkdirSync","dirPath","err","code","cachePath","npmCachePath","npm_config_cache","APPDATA","join","homedir","libvipsCachePath","globalLibvipsVersion","pkgConfigPath","stdout","trim","hasVendoredLibvips","currentPlatformId","vendorPath","__dirname","vendorVersionId","vendorPlatformId","vips","Error","brewPkgConfigPath","PKG_CONFIG_PATH","filter","p","useGlobalLibvips","Boolean","SHARP_IGNORE_GLOBAL_LIBVIPS","globalVipsVersion","gte","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst fs = require('fs');\nconst os = require('os');\nconst path = require('path');\nconst spawnSync = require('child_process').spawnSync;\nconst semver = require('semver');\nconst platform = require('./platform');\n\nconst env = process.env;\nconst minimumLibvipsVersion = env.npm_package_config_libvips || /* istanbul ignore next */\n  require('../package.json').config.libvips;\n\nconst spawnSyncOptions = {\n  encoding: 'utf8',\n  shell: true\n};\n\nconst mkdirSync = function (dirPath) {\n  try {\n    fs.mkdirSync(dirPath);\n  } catch (err) {\n    /* istanbul ignore if */\n    if (err.code !== 'EEXIST') {\n      throw err;\n    }\n  }\n};\n\nconst cachePath = function () {\n  const npmCachePath = env.npm_config_cache || /* istanbul ignore next */\n    (env.APPDATA ? path.join(env.APPDATA, 'npm-cache') : path.join(os.homedir(), '.npm'));\n  mkdirSync(npmCachePath);\n  const libvipsCachePath = path.join(npmCachePath, '_libvips');\n  mkdirSync(libvipsCachePath);\n  return libvipsCachePath;\n};\n\nconst globalLibvipsVersion = function () {\n  if (process.platform !== 'win32') {\n    const globalLibvipsVersion = spawnSync(`PKG_CONFIG_PATH=\"${pkgConfigPath()}\" pkg-config --modversion vips-cpp`, spawnSyncOptions).stdout || '';\n    return globalLibvipsVersion.trim();\n  } else {\n    return '';\n  }\n};\n\nconst hasVendoredLibvips = function () {\n  const currentPlatformId = platform();\n  const vendorPath = path.join(__dirname, '..', 'vendor');\n  let vendorVersionId;\n  let vendorPlatformId;\n  try {\n    vendorVersionId = require(path.join(vendorPath, 'versions.json')).vips;\n    vendorPlatformId = require(path.join(vendorPath, 'platform.json'));\n  } catch (err) {}\n  /* istanbul ignore if */\n  if (vendorVersionId && vendorVersionId !== minimumLibvipsVersion) {\n    throw new Error(`Found vendored libvips v${vendorVersionId} but require v${minimumLibvipsVersion}. Please remove the 'node_modules/sharp/vendor' directory and run 'npm install'.`);\n  }\n  /* istanbul ignore else */\n  if (vendorPlatformId) {\n    /* istanbul ignore else */\n    if (currentPlatformId === vendorPlatformId) {\n      return true;\n    } else {\n      throw new Error(`'${vendorPlatformId}' binaries cannot be used on the '${currentPlatformId}' platform. Please remove the 'node_modules/sharp/vendor' directory and run 'npm install'.`);\n    }\n  } else {\n    return false;\n  }\n};\n\nconst pkgConfigPath = function () {\n  if (process.platform !== 'win32') {\n    const brewPkgConfigPath = spawnSync('which brew >/dev/null 2>&1 && eval $(brew --env) && echo $PKG_CONFIG_LIBDIR', spawnSyncOptions).stdout || '';\n    return [brewPkgConfigPath.trim(), env.PKG_CONFIG_PATH, '/usr/local/lib/pkgconfig', '/usr/lib/pkgconfig']\n      .filter(function (p) { return !!p; })\n      .join(':');\n  } else {\n    return '';\n  }\n};\n\nconst useGlobalLibvips = function () {\n  if (Boolean(env.SHARP_IGNORE_GLOBAL_LIBVIPS) === true) {\n    return false;\n  }\n\n  const globalVipsVersion = globalLibvipsVersion();\n  return !!globalVipsVersion && /* istanbul ignore next */\n    semver.gte(globalVipsVersion, minimumLibvipsVersion);\n};\n\nmodule.exports = {\n  minimumLibvipsVersion: minimumLibvipsVersion,\n  cachePath: cachePath,\n  globalLibvipsVersion: globalLibvipsVersion,\n  hasVendoredLibvips: hasVendoredLibvips,\n  pkgConfigPath: pkgConfigPath,\n  useGlobalLibvips: useGlobalLibvips,\n  mkdirSync: mkdirSync\n};\n"]},"metadata":{},"sourceType":"script"}